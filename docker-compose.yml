services:
  # Node.js Express Application
  app:
    build:
      context: .
      target: production
      dockerfile: Dockerfile
    container_name: express-hello-world
    restart: unless-stopped
    environment:
      # Coolify will manage these environment variables
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}
      # Database connection (if needed in future)
      - DATABASE_URL=${DATABASE_URL}
      # App specific variables
      - APP_SECRET=${APP_SECRET}
      - API_KEY=${API_KEY}
    expose:
      - "3000"
    networks:
      - app-network
    # Health check for Coolify monitoring
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      # Coolify labels for management
      - coolify.managed=true
      - traefik.enable=true
      - "traefik.http.routers.app.rule=Host(`passport.abyauniversity.com`)"
      - traefik.http.routers.app.entryPoints=https
      - traefik.http.routers.app.tls=true
      - traefik.http.services.app.loadbalancer.server.port=3000

  # Optional: Add Redis for session storage (uncomment if needed)
  # redis:
  #   image: redis:7-alpine
  #   container_name: redis-cache
  #   restart: unless-stopped
  #   environment:
  #     - REDIS_PASSWORD=${REDIS_PASSWORD}
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - app-network
  #   exclude_from_hc: false

  # Optional: Database service (uncomment if needed)
  # postgres:
  #   image: postgres:15-alpine
  #   container_name: postgres-db
  #   restart: unless-stopped
  #   environment:
  #     - POSTGRES_DB=${POSTGRES_DB:-passport_app}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #   volumes:
  #     - postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - app-network
  #   exclude_from_hc: false

networks:
  app-network:
    driver: bridge

# Optional: Persistent volumes (uncomment if using database/redis)
# volumes:
#   redis-data:
#   postgres-data:
